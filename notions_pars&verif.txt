/*
27 december. found DFS algorithm for map validation
(done)15 december. must change file parsing logic 
to make map identification easy:
1. skip empty lines
2. copy whatever i have 6 times. skiping all \n and spaces
3. skip \n and spaces
4. copy all following lines, assuming it is a map
5. sent it to map verification
6. there is N/S/E/W/ letter in the map. it is only one
7. if 1st line is not wall - map error, exit program
8. remove all spaces and \n in the end
9. if last line is not wall - map error, exit program
10. replace all the spaces by 'x'(done)

january 3rd:
11. check for map: for each 0 - if there is x close to it. if yes -> map error, exit program.
12. for character: check if there is x close to it. if yes -> map error, exit program.
13. map is validated.
 
 /* old strategy for checking enclosed map *\
  using DFS algorithm: 
11. every symbol there the player could step is replaced by v
12. compare first map with the result of dfs: if any x is replaced by v - map error, exit


/* old strategy for map vaidation *\
10. check each line true: first_non_space_is_1 && last_non_space_is_1
11. check there is one and only character(NSWE)
12. for each space check it have no 0 or CHARACTER around
/*
parsing elements: each texture file must be .mlx format and it must be sucessfully processed by mlx, 
this can be checked through deducated mlx function, that will return the pointer
(something like ptr = mlx_open_file(file.mlx); if (!ptr) -> file is incorrect)
*parsing map: map can be any shape
this map is ok:
111111111111111
111001 11
1 1W11
1100101
1111111

parsing map: any map is valid untill there is no nl between lines and 
there is no situation when empty_space is surrounded by 0 or character(NSWE):

examples of invalis empty space situation:

111111
110001
100001
1S0001
100001
1 1111
111111

111111
110001
100001
1S0001
111001
1 0111
111111

111111
110001
100001
1S0001
1 0001
111111
111111

valid empty_space situation:
111111
110001
100001
1S0001
110001
1 1111
111111

1111
1111
11S1
1111

111
1N01
111

11111
1000N1
111111
*/
